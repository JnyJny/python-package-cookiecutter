[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.project_version}}"
description = "{{cookiecutter.project_short_description}}"
readme = "README.md"
license = "Apache-2.0"
authors = [{name = "{{ cookiecutter.github_username }}", email = "{{ cookiecutter.email }}"}]
repository = "{{cookiecutter.repository}}"

requires-python = ">={{cookiecutter.python_version_min}},<{{cookiecutter.python_version_max}}"

dependencies = [
    "loguru",
    "typer",
]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Environment :: Console",
  "Topic :: Utilities",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: {{ cookiecutter.python_version_min }}",
]

[project.scripts]
{{cookiecutter.cli_name}} = "{{ cookiecutter.project_slug }}.__main__:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.project_slug }}"]

[dependency-groups]
dev = [
    "black",
    "isort",
    "mypy",
    "poethepoet",
    "pytest",
    "pytest-cov",
    "ruff",
    "ty",
]

[tool.poe.tasks]

# testing
_generate_coverage = "pytest --cov=./src/{{ cookiecutter.project_slug }} --cov-report=html"
_open_report = "open htmlcov/index.html"
coverage.sequence = [ "_generate_coverage", "_open_report"]
coverage.help = "Generate a HTML code coverage report and open it in a browser."

# code quality checks
mypy.cmd = "mypy --config-file pyproject.toml src/{{ cookiecutter.project_slug }}"
mypy.help = "Run mypy type checker on source. [Code Quality]"

ty.cmd = "ty check src/{{ cookiecutter.project_slug }}"
ty.help = "Run ty type checker on source. [Code Quality]"

ruff.cmd = "ruff check src/{{ cookiecutter.project_slug }}"
ruff.help = "Run ruff linter on source. [Code Quality]"

check.sequence = [ "ruff", "ty", "mypy" ]
check.help = "Run all code quality tools on source."

test.cmd = "pytest"
test.help = "Runs testing suites using pytest. [Code Quality]"


# Publish tasks

## update version in pyproject

_patch_bump = "uv version --bump patch"
_minor_bump = "uv version --bump minor"
_major_bump = "uv version --bump major"


## add, commit, tag and commit pyproject updated by bump

_add = "git add pyproject.toml uv.lock"
_commit = {shell = "git commit -m v`uv version --short`"}
_tag = { shell = "git tag v`uv version --short`" }
_push = "git push --all"
_push_tags = "git push --tags"

_update_pyproject = ["_add", "_commit", "_tag", "_push_tags", "_push"]

## Publish patch, minor or major releases.

publish_patch.sequence = ["_patch_bump", "_update_pyproject"]
publish_patch.help = "Publish a patch release."

publish_minor.sequence = ["_minor_bump", "_update_pyproject"]
publish_minor.help = "Publish a minor release."

publish_major.sequence = ["_major_bump", "_update_pyproject"]
publish_major.help = "Publish a major release."

publish.ref =  "publish_patch"
publish.help = "Publish a minor release."

# clean
clean.cmd = "rm -rf htmlcov dist {{ cookiecutter.project_slug }}.egg-info *.log"
clean.help = "Clean up the project directory."

[tool.pytest.ini_options]
add_opts = ["-x"]

[mypy]
[mypy-loguru]
ignore_missing_imports = true
[mypy-typer]
ignore_missing_imports = true
