[project]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.project_version}}"
description = "{{cookiecutter.project_short_description}}"
readme = "README.md"
license = "{{ cookiecutter.license }}"
authors = [{name = "{{ cookiecutter.github_username }}", email = "{{ cookiecutter.email }}"}]
repository = "{{ cookiecutter.repository }}"
requires-python = ">={{ cookiecutter.python_version_min }},<{{ cookiecutter.python_version_max }}"
dependencies = [
    "loguru",
    "typer",
{% if cookiecutter.use_pydantic_settings -%}
    "pydantic_settings",
{%- endif %}
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "Environment :: Console",
  "Topic :: Utilities",
  "Programming Language :: Python",
  "Programming Language :: Python :: {{ cookiecutter.python_version_min.split('.')[0] }}",
  "Programming Language :: Python :: {{ cookiecutter.python_version_min }}",
]

[project.urls]
Documentation = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository }}#readme"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository }}/issues"
Source = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository }}"


[project.scripts]
{{cookiecutter.cli_name}} = "{{ cookiecutter.package_name }}.__main__:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.package_name }}"]

[dependency-groups]
dev = [
    "mypy",
    "poethepoet",
    "pytest",
    "pytest-cov",
    "ruff",
    "ty",
]

[tool.poe.tasks]

# Code Quality

_generate_coverage = "pytest --cov=./src/{{ cookiecutter.package_name }} --cov-report=html"
_open_report = "open htmlcov/index.html"
coverage.sequence = [ "_generate_coverage", "_open_report"]
coverage.help = "[Code Quality] Open generated coverage report in a browser."

mypy.cmd = "mypy --config-file pyproject.toml src/{{ cookiecutter.package_name }}"
mypy.help = "[Code Quality] Run mypy type checker on source."

ty.cmd = "ty check src/{{ cookiecutter.package_name }}"
ty.help = "[Code Quality] Run ty type checker on source."

ruff-check.cmd = "ruff check --select ALL src/{{ cookiecutter.package_name }} tests"
ruff-check.help = "[Code Quality] Run ruff check on source."

ruff-format.cmd = "ruff format src tests"
ruff-format.help = "[Code Quality] Run ruff format on source."

ruff.sequence = ["ruff-check", "ruff-format"]
ruff.help = "[Code Quality] Run Ruff check and format on source."

check.sequence = [ "ruff", "ty", "mypy" ]
check.help = "[Code Quality] Run all code quality tools on source."

test.cmd = "pytest"
test.help = "[Code Quality] Runs testing suites using pytest."

qc.seqence = [ "test", "ruff", "mypy", "ty" ]
qc.help = "[Code Quality] Run all code quality tasks."

# Publish tasks

## update version in pyproject

_patch_bump = "uv version --bump patch"
_minor_bump = "uv version --bump minor"
_major_bump = "uv version --bump major"

## add, commit, tag and commit pyproject updated by bump

_add = "git add pyproject.toml uv.lock"
_commit = {shell = "git commit -m v`uv version --short`"}
_tag = { shell = "git tag v`uv version --short`" }
_push = "git push --all"
_push_tags = "git push --tags"

_update_pyproject = ["_add", "_commit", "_tag", "_push_tags", "_push"]

## Publish patch, minor or major releases
## See .github/workflows/release.yaml

publish_patch.sequence = ["_patch_bump", "_update_pyproject"]
publish_patch.help = "[Publish] Patch release."

publish_minor.sequence = ["_minor_bump", "_update_pyproject"]
publish_minor.help = "[Publish] Minor release."

publish_major.sequence = ["_major_bump", "_update_pyproject"]
publish_major.help = "[Publish] Major release."

publish.ref =  "publish_patch"
publish.help = "[Publish] Patch release."

# Clean

clean.cmd = "rm -rf htmlcov dist {{ cookiecutter.package_name }}.egg-info *.log"
# clean.cmd = "git clean -f"
clean.help = "[Clean] Remove testing, build and code quality artifacts."

# Tool Options

[tool.pytest.ini_options]

[tool.ruff]
fix = true
lint.select = [ "I" ]

[tool.ty]

[mypy]

[mypy-loguru]
ignore_missing_imports = true

[mypy-typer]
ignore_missing_imports = true

{% if cookiecutter.use_pydantic_settings -%}
[mypy-pydantic_settings]
ignore_missing_imports = true
{% endif -%}
