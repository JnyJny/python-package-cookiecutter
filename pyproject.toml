[project]
name = "python-package-cookiecutter"
version = "1.5.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = []

[dependency-groups]
dev = [
    "cookiecutter>=2.6.0",
    "poethepoet>=0.35.0",
    "pytest>=8.4.0",
    "ruff>=0.11.13",
    "sphinx>=8.2.3",
]

[tool.poe.tasks]

test.cmd = "pytest"
test.help = "Test cookiecutter package."

ruff_check.cmd = "ruff check hooks tests"
ruff_check.help = "ruff check on hooks and tests."

ruff_format.cmd = "ruff format hooks tests"
ruff_format.help = "Ruff format hooks and tests."

ruff_check_template.cmd = "ruff --isolated check '{{ cookiecutter.package_name }}'/src '{{ cookiecutter.package_name }}'/tests"
ruff_check_template.help = "Ruff check template src and tests."

ruff_format_template.cmd = "ruff --isolated format '{{ cookiecutter.package_name }}'/src '{{ cookiecutter.package_name }}'/tests"
ruff_format_template.help = "Ruff format template src and tests."

ruff.sequence = [ "ruff_check", "ruff_check_template", "ruff_format", "ruff_format_template" ]
ruff.help = "Run ruff check and format on all code."

# Release tasks
_patch_bump = "uv version --bump patch"
_minor_bump = "uv version --bump minor"
_major_bump = "uv version --bump major"

_add = "git add pyproject.toml uv.lock"
_commit = {shell = "git commit -m v`uv version --short`"}
_tag = {shell = "git tag v`uv version --short`"}
_push = "git push --all"
_push_tags = "git push --tags"

_update_pyproject = ["_add", "_commit", "_tag", "_push_tags", "_push"]

release_patch.sequence = [ "_patch_bump", "_update_pyproject"]
release_patch.help = "Publish patch release."

release_minor.sequence = [ "_minor_bump", "_update_pyproject"]
release_minor.help = "Publish minor release."

release_major.sequence = [ "_major_bump", "_update_pyproject"]
release_major.help = "Publish major release."

release.ref = "release_patch"
release.help = "Publish patch release"

# Create a project with the template for local testing in tmp/thing.

_tmpdir = "mkdir -p tmp"
_generate = "cookiecutter --no-input -o tmp --overwrite-if-exists ."

bake.sequence = [ "_tmpdir", "_generate" ]
bake.help = "Create a project in ./tmp"

# Cleanup tasks
_remove_tmp = "rm -rf tmp"
_remove_gh_repo = "gh repo delete thing --yes"

clean.sequence = ["_remove_tmp", "_remove_gh_repo" ]
clean.help = "Cleanup project."

# Misc

tree.cmd = "tree . -a -I .venv -I .git -I .ruff_cache -I .pytest_cache"
tree.help = "[Misc] List project files in tree format."


[tool.ruff]
fix = true
lint.select = [ "ALL" ]
lint.ignore = [
  # incorrect-blank-line-before-class (D203)
  "D203",
  # blank-line-before-class (D211)
  "D211",
  # multi-line-summary-first-line (D212)
  "D212",
  # multi-line-summary-second-line (D213)
  "D213",
  # missing-trailing-comma (COM812)
  "COM812",
  # blind-except (BLE001)
  "BLE001"
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  # assert (S101)
  "S101",
  # subprocess-without-shell-equals-true (S603)
  "S603"
]

[tool.pytest.ini_options]
# Narrow to just tests to avoid finding {{ cookiecutter.package_name }}/tests
# which fail when executed in-place.
testpaths = [ "tests" ]


