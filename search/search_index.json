{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Package Cookiecutter Template Documentation","text":"<p>Welcome to the comprehensive documentation for the Python Package Cookiecutter Template.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#new-to-the-template","title":"New to the Template?","text":"<ul> <li>Overview - Learn what this template offers and why you should use it</li> <li>Quick Start - Get your first package running in minutes</li> </ul>"},{"location":"#ready-to-dive-deeper","title":"Ready to Dive Deeper?","text":"<ul> <li>Template User Guide - Detailed documentation of all features</li> <li>Customization Guide - How to modify your generated project</li> </ul>"},{"location":"#what-this-template-provides","title":"What This Template Provides","text":""},{"location":"#zero-configuration-cicd","title":"Zero Configuration CI/CD","text":"<ul> <li>Complete GitHub Actions workflows for testing, building, and publishing</li> <li>Automated PyPI publishing with trusted publishing (no API tokens needed)</li> <li>Documentation auto-deployed to GitHub Pages</li> <li>Quality tools pre-configured: ruff, ty, pytest, coverage reporting</li> </ul>"},{"location":"#python-ecosystem","title":"Python Ecosystem","text":"<ul> <li>uv for fast dependency management</li> <li>Typer CLI framework with rich help</li> <li>Loguru for structured logging</li> <li>Pydantic Settings for configuration</li> <li>MkDocs with multiple theme options</li> </ul>"},{"location":"#package-structure","title":"Package Structure","text":"<ul> <li>src/ layout following Python packaging best practices</li> <li>Comprehensive testing setup with pytest and coverage</li> <li>Multiple build backends (uv or hatch)</li> <li>Semantic versioning with automated changelog generation</li> <li>Cross-platform testing (Linux, macOS, Windows)</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"I want to... Go to... Understand what this template offers Overview Create my first package quickly Quick Start Learn about all features in detail Template User Guide Customize my generated project Customization Guide See examples and best practices Template User Guide - Examples Understand the GitHub workflows Template User Guide - GitHub Actions Set up PyPI publishing Template User Guide - Trusted Publishing"},{"location":"#template-workflow","title":"Template Workflow","text":"<p>The template enables a streamlined development workflow:</p> <ol> <li>Write Code - Edit your package source files</li> <li>Quality Control - Run <code>poe qc</code> to check code quality</li> <li>Release - Run <code>poe publish</code> to version and tag</li> <li>Live on PyPI - Automatic publishing via GitHub Actions</li> </ol>"},{"location":"#example-generated-project-structure","title":"Example Generated Project Structure","text":"<pre><code>your-package/\n\u251c\u2500\u2500 .github/workflows/     # Complete CI/CD pipeline\n\u251c\u2500\u2500 docs/                  # MkDocs documentation\n\u251c\u2500\u2500 src/your_package/      # Your source code\n\u2502   \u251c\u2500\u2500 __main__.py        # CLI entry point\n\u2502   \u2514\u2500\u2500 settings.py        # Configuration (optional)\n\u251c\u2500\u2500 tests/                 # Comprehensive test suite\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u251c\u2500\u2500 README.md              # Project documentation\n\u2514\u2500\u2500 LICENSE                # Your chosen license\n</code></pre>"},{"location":"#support-and-contributing","title":"Support and Contributing","text":"<ul> <li>Issues: Report bugs or request features on GitHub Issues</li> <li>Discussions: Ask questions on GitHub Discussions</li> <li>Contributing: See the project's CONTRIBUTING.md for contribution guidelines</li> </ul>"},{"location":"#license","title":"License","text":"<p>This template is released under the MIT License. Generated projects use the license you choose during template creation.</p> <p>Ready to get started? Head to the Quick Start Guide to create your first package in minutes!</p>"},{"location":"customization/","title":"Customization Guide","text":"<p>After creating your project with the cookiecutter template, you'll want to customize it  to match your specific needs. This guide covers the most common modifications and  customizations you should consider.</p>"},{"location":"customization/#essential-customizations","title":"Essential Customizations","text":""},{"location":"customization/#1-project-documentation","title":"1. Project Documentation","text":""},{"location":"customization/#readmemd","title":"README.md","text":"<p>Your generated <code>README.md</code> contains template placeholders. Update these sections:</p> <pre><code># Your Package Name\n\n**Update this description** to explain what your package does and why someone would use it.\n\n## Installation\n\n```bash\npip install your-package-name\n</code></pre>"},{"location":"customization/#usage","title":"Usage","text":"<pre><code>import your_package\n\n# Add real usage examples here\n</code></pre>"},{"location":"customization/#features","title":"Features","text":"<ul> <li>List your actual features</li> <li>Remove template examples</li> <li>Add screenshots or demos if applicable <pre><code>#### CONTRIBUTING.md\nUpdate the contribution guidelines to reflect your project's needs:\n\n- **Development setup**: Specific to your project\n- **Code style**: Any additional style requirements\n- **Testing requirements**: Coverage thresholds, test types\n- **Review process**: How you handle pull requests\n\n### 2. Package Configuration\n\n#### pyproject.toml Updates\n\n**Project Metadata**:\n```toml\n[project]\nname = \"your-package-name\"\ndescription = \"Update with your actual description\"\nauthors = [\n    {name = \"Your Name\", email = \"your.email@example.com\"}\n]\nkeywords = [\"add\", \"relevant\", \"keywords\"]\nclassifiers = [\n    # Update these PyPI classifiers\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\", \n    \"Programming Language :: Python :: 3.13\",\n]\n</code></pre></li> </ul> <p>Dependencies: <pre><code>dependencies = [\n    # Add your actual runtime dependencies\n    \"requests&gt;=2.28.0\",\n    \"pydantic&gt;=2.0.0\",\n    # Remove template dependencies you don't need\n]\n\n[dependency-groups]\ndev = [\n    # Add development dependencies specific to your project\n    \"pytest-asyncio\",  # If you use async code\n    \"httpx\",          # For HTTP testing\n    # Keep the quality tools unless you prefer alternatives\n]\n</code></pre></p>"},{"location":"customization/#testing-configuration","title":"Testing Configuration","text":"<pre><code>[tool.pytest.ini_options]\n# Add markers specific to your project\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n    \"unit: marks tests as unit tests\",\n]\n\n# Add test paths specific to your project\ntestpaths = [\"tests\"]\n# Configure coverage\naddopts = \"--cov=src/your_package --cov-report=html --cov-report=term-missing\"\n</code></pre>"},{"location":"customization/#3-code-quality-configuration","title":"3. Code Quality Configuration","text":""},{"location":"customization/#ruff-configuration","title":"Ruff Configuration","text":"<p>Customize linting rules in <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\n# Adjust line length if needed\nline-length = 88\n\n[tool.ruff.lint]\n# Add or remove rule categories\nselect = [\"ALL\"]\nignore = [\n    # Add rules you want to ignore\n    \"D203\",    # 1 blank line required before class docstring\n    \"D213\",    # Multi-line docstring summary should start at the second line\n    # Add project-specific ignores\n]\n\n[tool.ruff.lint.per-file-ignores]\n# Different rules for different file types\n\"tests/*\" = [\"S101\", \"PLR2004\"]  # Allow assert and magic values in tests\n\"scripts/*\" = [\"T201\"]           # Allow print in scripts\n</code></pre>"},{"location":"customization/#type-checking-with-ty","title":"Type Checking with ty","text":"<p>Configure ty for your project needs:</p> <pre><code>[tool.ty]\n# Add specific configuration for ty if needed\n</code></pre>"},{"location":"customization/#4-github-workflows-customization","title":"4. GitHub Workflows Customization","text":""},{"location":"customization/#modify-python-version-matrix","title":"Modify Python Version Matrix","text":"<p>Edit your project's <code>pyproject.toml</code>:</p> <pre><code>[tool.your_package.ci]\ntest-python-versions = [\"3.11\", \"3.12\", \"3.13\"]  # Adjust as needed\n</code></pre>"},{"location":"customization/#operating-system-matrix","title":"Operating System Matrix","text":"<p>Modify <code>.github/workflows/release.yaml</code> if you need different OS coverage:</p> <pre><code>strategy:\n  matrix:\n    os: [ubuntu-latest, macos-latest, windows-latest]  # Adjust as needed\n</code></pre>"},{"location":"customization/#environment-variables","title":"Environment Variables","text":"<p>Add project-specific environment variables to workflows:</p> <pre><code>env:\n  YOUR_API_KEY: ${{ secrets.YOUR_API_KEY }}\n  DATABASE_URL: ${{ secrets.DATABASE_URL }}\n</code></pre>"},{"location":"customization/#5-documentation-customization","title":"5. Documentation Customization","text":""},{"location":"customization/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>Edit <code>mkdocs.yml</code> to customize your documentation:</p> <pre><code>site_name: Your Package Documentation\nsite_description: Detailed description of your package\n\n# Add custom navigation\nnav:\n  - Home: index.md\n  - Getting Started:\n    - Installation: getting-started/installation.md\n    - Quick Start: getting-started/quickstart.md\n    - Configuration: getting-started/configuration.md\n  - User Guide:\n    - CLI Usage: user-guide/cli.md\n    - API Reference: user-guide/api.md\n    - Examples: user-guide/examples.md\n  - Contributing: contributing.md\n  - Changelog: changelog.md\n\n# Customize theme\ntheme:\n  name: material  # or your chosen theme\n  palette:\n    - scheme: default\n      primary: blue\n      accent: blue\n</code></pre>"},{"location":"customization/#add-custom-documentation-pages","title":"Add Custom Documentation Pages","text":"<p>Create documentation specific to your project:</p> <pre><code># docs/user-guide/api.md\n# API Reference\n\n## Core Functions\n\n### your_function()\nDescription of your main function...\n\n## Classes\n\n### YourClass\nDescription of your main class...\n</code></pre>"},{"location":"customization/#advanced-customizations","title":"Advanced Customizations","text":""},{"location":"customization/#1-custom-cli-commands","title":"1. Custom CLI Commands","text":"<p>Extend the CLI in <code>src/your_package/__main__.py</code>:</p> <pre><code>import typer\nfrom your_package.commands import data_command, export_command\n\napp = typer.Typer(\n    name=\"your_package\",\n    help=\"Your package description and main help text.\",\n)\n\n# Add your custom commands\napp.add_typer(data_command.app, name=\"data\", help=\"Data management commands\")\napp.add_typer(export_command.app, name=\"export\", help=\"Export commands\")\n\n@app.command()\ndef process(\n    input_file: Path = typer.Argument(..., help=\"Input file to process\"),\n    output_file: Path = typer.Option(None, help=\"Output file path\"),\n    verbose: bool = typer.Option(False, \"--verbose\", \"-v\", help=\"Verbose output\"),\n):\n    \"\"\"Process an input file and generate output.\"\"\"\n    # Your command implementation\n    pass\n</code></pre>"},{"location":"customization/#2-configuration-management","title":"2. Configuration Management","text":"<p>Extend settings in <code>src/your_package/settings.py</code>:</p> <pre><code>from pydantic_settings import BaseSettings\nfrom typing import Optional\n\nclass Settings(BaseSettings):\n    # Database settings\n    database_url: str = \"sqlite:///app.db\"\n    database_echo: bool = False\n\n    # API settings\n    api_key: Optional[str] = None\n    api_timeout: int = 30\n\n    # Logging settings\n    log_level: str = \"INFO\"\n    log_file: Optional[str] = None\n\n    # Feature flags\n    enable_feature_x: bool = False\n\n    class Config:\n        env_prefix = \"YOUR_PACKAGE_\"\n        env_file = \".env\"\n</code></pre>"},{"location":"customization/#3-custom-poe-tasks","title":"3. Custom Poe Tasks","text":"<p>Add project-specific tasks to <code>pyproject.toml</code>:</p> <pre><code>[tool.poe.tasks]\n# Data management tasks\nmigrate = \"alembic upgrade head\"\nseed-data = \"python scripts/seed_database.py\"\nbackup = \"python scripts/backup.py\"\n\n# Custom quality tasks\nlint-docs = \"ruff check docs/\"\ncheck-security = \"bandit -r src/\"\nvalidate-schema = \"python scripts/validate_schema.py\"\n\n# Deployment tasks\ndeploy-staging = \"python scripts/deploy.py --env staging\"\ndeploy-prod = \"python scripts/deploy.py --env production\"\n\n# Custom sequences\nfull-check.sequence = [\"ruff\", \"ty\", \"test\", \"check-security\"]\ndeploy-pipeline.sequence = [\"full-check\", \"build\", \"deploy-staging\"]\n</code></pre>"},{"location":"customization/#4-testing-strategy","title":"4. Testing Strategy","text":""},{"location":"customization/#custom-test-configuration","title":"Custom Test Configuration","text":"<p>Add test utilities in <code>tests/conftest.py</code>:</p> <pre><code>import pytest\nfrom your_package import create_app\nfrom your_package.database import get_db\n\n@pytest.fixture\ndef app():\n    \"\"\"Create application for testing.\"\"\"\n    return create_app(testing=True)\n\n@pytest.fixture\ndef db():\n    \"\"\"Create database for testing.\"\"\"\n    # Setup test database\n    yield get_db()\n    # Cleanup\n\n@pytest.fixture\ndef sample_data():\n    \"\"\"Provide sample data for tests.\"\"\"\n    return {\n        \"users\": [...],\n        \"products\": [...],\n    }\n</code></pre>"},{"location":"customization/#test-categories","title":"Test Categories","text":"<p>Organize tests with markers:</p> <pre><code># tests/test_integration.py\nimport pytest\n\n@pytest.mark.integration\ndef test_database_connection():\n    \"\"\"Test database connectivity.\"\"\"\n    pass\n\n@pytest.mark.slow\ndef test_large_data_processing():\n    \"\"\"Test processing large datasets.\"\"\"\n    pass\n</code></pre> <p>Run specific test categories: <pre><code>poe test -m \"not slow\"        # Skip slow tests\npoe test -m integration       # Only integration tests\npoe test -m \"unit and not slow\"  # Unit tests that are fast\n</code></pre></p>"},{"location":"customization/#project-specific-modifications","title":"Project-Specific Modifications","text":""},{"location":"customization/#1-remove-unused-features","title":"1. Remove Unused Features","text":"<p>If you don't need certain template features:</p>"},{"location":"customization/#remove-pydantic-settings","title":"Remove Pydantic Settings","text":"<ol> <li>Delete <code>src/your_package/settings.py</code></li> <li>Remove pydantic-settings from dependencies</li> <li>Update <code>__main__.py</code> to remove settings imports</li> </ol>"},{"location":"customization/#remove-file-logging","title":"Remove File Logging","text":"<ol> <li>Remove file logging configuration from <code>__main__.py</code></li> <li>Update loguru configuration to console-only</li> </ol>"},{"location":"customization/#simplify-cli","title":"Simplify CLI","text":"<p>If you only need a simple CLI: 1. Remove complex command structure 2. Simplify <code>__main__.py</code> to basic argument parsing 3. Remove unnecessary CLI dependencies</p>"},{"location":"customization/#2-add-domain-specific-features","title":"2. Add Domain-Specific Features","text":""},{"location":"customization/#web-api-with-fastapi","title":"Web API with FastAPI","text":"<p>Add FastAPI for web APIs:</p> <pre><code># src/your_package/api.py\nfrom fastapi import FastAPI\nfrom your_package.routes import items_router\n\napp = FastAPI(title=\"Your Package API\")\napp.include_router(items_router, prefix=\"/api/v1\")\n</code></pre>"},{"location":"customization/#database-integration","title":"Database Integration","text":"<p>Add database support:</p> <pre><code># src/your_package/database.py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine(settings.database_url)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n</code></pre>"},{"location":"customization/#background-tasks","title":"Background Tasks","text":"<p>Add task queue integration:</p> <pre><code># src/your_package/tasks.py\nfrom celery import Celery\n\ncelery_app = Celery(\"your_package\")\n\n@celery_app.task\ndef process_data(data_id: str):\n    \"\"\"Process data in background.\"\"\"\n    pass\n</code></pre>"},{"location":"customization/#deployment-customizations","title":"Deployment Customizations","text":""},{"location":"customization/#1-docker-support","title":"1. Docker Support","text":"<p>Add Docker configuration:</p> <pre><code># Dockerfile\nFROM python:3.13-slim\n\nWORKDIR /app\nCOPY pyproject.toml uv.lock ./\nRUN pip install uv &amp;&amp; uv sync --frozen\n\nCOPY src/ ./src/\nRUN uv pip install -e .\n\nCMD [\"your-package\"]\n</code></pre>"},{"location":"customization/#2-environment-configuration","title":"2. Environment Configuration","text":"<p>Add environment-specific configuration:</p> <pre><code># src/your_package/config.py\nimport os\nfrom enum import Enum\n\nclass Environment(str, Enum):\n    DEVELOPMENT = \"development\"\n    STAGING = \"staging\"  \n    PRODUCTION = \"production\"\n\ndef get_settings():\n    env = os.getenv(\"ENVIRONMENT\", Environment.DEVELOPMENT)\n\n    if env == Environment.PRODUCTION:\n        return ProductionSettings()\n    elif env == Environment.STAGING:\n        return StagingSettings()\n    else:\n        return DevelopmentSettings()\n</code></pre>"},{"location":"customization/#3-cicd-enhancements","title":"3. CI/CD Enhancements","text":"<p>Add deployment steps to <code>.github/workflows/release.yaml</code>:</p> <pre><code>deploy:\n  needs: [publish, github-release]\n  if: success()\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v4\n    - name: Deploy to production\n      run: |\n        # Your deployment commands\n        echo \"Deploying to production...\"\n</code></pre>"},{"location":"customization/#maintenance-tasks","title":"Maintenance Tasks","text":""},{"location":"customization/#regular-updates","title":"Regular Updates","text":"<ol> <li>Dependencies: Review and update dependencies quarterly</li> <li>Python versions: Add new Python versions as they're released</li> <li>GitHub Actions: Update action versions annually</li> <li>Documentation: Keep documentation current with code changes</li> </ol>"},{"location":"customization/#quality-monitoring","title":"Quality Monitoring","text":"<ol> <li>Test coverage: Maintain &gt;90% test coverage</li> <li>Security: Run security scans regularly</li> <li>Performance: Monitor package size and import time</li> <li>Dependencies: Monitor for security vulnerabilities</li> </ol> <p>This customization guide should help you adapt the template to your specific needs while maintaining the quality and automation features that make it valuable.</p>"},{"location":"overview/","title":"Python Package Cookiecutter Template - Overview","text":""},{"location":"overview/#what-is-this-template","title":"What is this template?","text":"<p>There are many cookiecutter templates, but this one is mine and I'm sharing  it with you. With it, you can quickly create a complete Python package designed to  be managed with uv and  direnv, a default typer  command-line interface, optional settings using  pydantic-settings and  logging using my favorite logger, loguru.  Development activities like testing, code quality checks, and publishing to PyPI are  all baked in and ready to go thanks to Poe The Poet.  Project documentation is automatically configured to deploy to GitHub Pages using  MkDocs. Best of all, I've added all sorts of templates and  base files to help provide a great GitHub experience for you and people that interact  with your project repository.</p>"},{"location":"overview/#why-use-this-template","title":"Why Use This Template?","text":""},{"location":"overview/#zero-configuration-required","title":"Zero Configuration Required","text":"<ul> <li>Complete CI/CD pipeline with GitHub Actions for testing, building, and publishing</li> <li>Automated PyPI publishing with trusted publishing (no API tokens needed)</li> <li>Documentation auto-deployed to GitHub Pages</li> <li>Quality tools pre-configured: ruff, ty, pytest, coverage reporting</li> </ul>"},{"location":"overview/#python-ecosystem","title":"Python Ecosystem","text":"<ul> <li>uv for fast dependency management and    Python version control</li> <li>Typer CLI framework with rich help and autocompletion</li> <li>Loguru for structured logging</li> <li>Pydantic Settings for    configuration management</li> <li>MkDocs with multiple theme options for documentation</li> </ul>"},{"location":"overview/#package-structure","title":"Package Structure","text":"<ul> <li>src/ layout following Python packaging best practices</li> <li>Comprehensive testing setup with pytest and coverage</li> <li>Multiple build backends (uv or hatch) </li> <li>Semantic versioning with automated changelog generation</li> <li>Cross-platform testing (Linux, macOS, Windows)</li> </ul>"},{"location":"overview/#streamlined-workflow","title":"Streamlined Workflow","text":"<ul> <li>Write Code - Edit your package source files</li> <li>Quality Control - Run <code>poe qc</code> to check code quality</li> <li>Release - Run <code>poe publish</code> to version and tag</li> <li>Live on PyPI - Automatic publishing via GitHub Actions</li> </ul>"},{"location":"overview/#what-you-get","title":"What You Get","text":"<p>When you create a project with this template, you get:</p>"},{"location":"overview/#project-structure","title":"Project Structure","text":"<pre><code>your-package/\n\u251c\u2500\u2500 .github/              # GitHub workflows and templates\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u251c\u2500\u2500 release.yaml  # Complete CI/CD pipeline\n\u2502   \u2502   \u2514\u2500\u2500 docs.yml      # Documentation deployment\n\u2502   \u2514\u2500\u2500 ISSUE_TEMPLATE/   # Issue and PR templates\n\u251c\u2500\u2500 docs/                 # MkDocs documentation\n\u251c\u2500\u2500 src/your_package/     # Your package source code\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __main__.py       # CLI entry point\n\u2502   \u251c\u2500\u2500 self_subcommand.py\n\u2502   \u2514\u2500\u2500 settings.py       # Optional configuration\n\u251c\u2500\u2500 tests/                # Test suite\n\u251c\u2500\u2500 pyproject.toml        # Project configuration\n\u251c\u2500\u2500 README.md             # Project documentation\n\u2514\u2500\u2500 LICENSE               # Your chosen license\n</code></pre>"},{"location":"overview/#built-in-tools","title":"Built-in Tools","text":"<ul> <li>Testing: pytest with coverage reporting</li> <li>Code Quality: ruff for linting and formatting, ty for type checking</li> <li>Documentation: MkDocs with auto-generated API docs</li> <li>Task Runner: Poe The Poet for common development tasks</li> <li>Dependency Management: uv for fast, reliable dependency resolution</li> <li>Version Control: Git with automatic initial commit</li> <li>CI/CD: Complete GitHub Actions workflows</li> </ul>"},{"location":"overview/#github-integration","title":"GitHub Integration","text":"<ul> <li>Issue Templates: Bug reports, feature requests, and questions</li> <li>Pull Request Template: Contribution guidelines</li> <li>Dependabot: Automatic dependency updates</li> <li>Release Automation: Semantic versioning with auto-generated changelogs</li> <li>Documentation Deployment: Automatic GitHub Pages deployment</li> </ul>"},{"location":"overview/#template-configuration","title":"Template Configuration","text":"<p>The template is highly configurable through cookiecutter prompts:</p>"},{"location":"overview/#required-configuration","title":"Required Configuration","text":"<ul> <li>Package Name: Your Python package name</li> <li>Project Description: Brief description of your project</li> <li>Author Information: Your name and email</li> <li>License: Choose from multiple open source licenses</li> </ul>"},{"location":"overview/#optional-features","title":"Optional Features","text":"<ul> <li>Pydantic Settings: Configuration management with environment variables</li> <li>File Logging: Optional file-based logging in addition to console</li> <li>GitHub Repository: Automatic repository creation and push</li> <li>Build Backend: Choose between uv or hatch</li> <li>Documentation Theme: Multiple MkDocs theme options</li> </ul>"},{"location":"overview/#cicd-configuration","title":"CI/CD Configuration","text":"<ul> <li>Python Version Matrix: Which Python versions to test against</li> <li>OS Matrix: Which operating systems to test on</li> <li>Testing Strategy: Comprehensive test matrix or minimal testing</li> </ul>"},{"location":"overview/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started in minutes</li> <li>Template User Guide - Detailed feature documentation</li> <li>Customization Guide - How to modify your generated project</li> </ul>"},{"location":"overview/#support","title":"Support","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>Discussions: Ask questions and share ideas</li> <li>Contributing: See CONTRIBUTING.md for contribution guidelines</li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get your Python package up and running in minutes with this cookiecutter template.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":""},{"location":"quickstart/#required-tools","title":"Required Tools","text":"Tool Required Purpose cookiecutter \u2705 Creates projects from templates git \u2705 Version control system uv \u2705 Python and dependency management"},{"location":"quickstart/#optional-tools","title":"Optional Tools","text":"Tool Purpose direnv Automatic virtual environment activation gh GitHub CLI for repository creation"},{"location":"quickstart/#accounts-optional-but-recommended","title":"Accounts (Optional but Recommended)","text":"<ul> <li>GitHub account for repository hosting and CI/CD</li> <li>PyPI account for package publishing</li> </ul>"},{"location":"quickstart/#step-1-create-your-project","title":"Step 1: Create Your Project","text":""},{"location":"quickstart/#using-uvx-recommended","title":"Using uvx (Recommended)","text":"<pre><code>uvx cookiecutter gh:JnyJny/python-package-cookiecutter\n</code></pre>"},{"location":"quickstart/#using-pip","title":"Using pip","text":"<pre><code>pip install cookiecutter\ncookiecutter gh:JnyJny/python-package-cookiecutter\n</code></pre>"},{"location":"quickstart/#configuration-prompts","title":"Configuration Prompts","text":"<p>The template will ask you several questions to configure your project:</p>"},{"location":"quickstart/#basic-information","title":"Basic Information","text":"<pre><code>package_name [my_package]: your_package_name\npackage_description [A short description]: Your package description\nauthor_name [Your Name]: Your Name\nauthor_email [your.email@example.com]: your.email@example.com\ngithub_username [yourusername]: yourusername\n</code></pre>"},{"location":"quickstart/#license-selection","title":"License Selection","text":"<pre><code>license [MIT]:\n  1 - MIT\n  2 - Apache-2.0\n  3 - GPL-3.0\n  4 - BSD-3-Clause\n  5 - no-license\n</code></pre>"},{"location":"quickstart/#feature-options","title":"Feature Options","text":"<pre><code>use_pydantic_settings [True]: True/False\nlog_to_file [False]: True/False\ncreate_github_repo [False]: True/False\nbuild_backend [uv]: uv/hatch\n</code></pre>"},{"location":"quickstart/#testing-configuration","title":"Testing Configuration","text":"<pre><code>python_testing_matrix [[\"3.11\", \"3.12\", \"3.13\"]]: Python versions to test\nos_testing_matrix [ubuntu-latest]: Operating systems to test\n</code></pre>"},{"location":"quickstart/#step-2-navigate-to-your-project","title":"Step 2: Navigate to Your Project","text":"<pre><code>cd your_package_name\n</code></pre> <p>Your project is now created with: - \u2705 Virtual environment created and activated - \u2705 Dependencies installed - \u2705 Git repository initialized - \u2705 Initial commit made - \u2705 (Optional) GitHub repository created</p>"},{"location":"quickstart/#step-3-explore-your-project","title":"Step 3: Explore Your Project","text":""},{"location":"quickstart/#view-available-tasks","title":"View Available Tasks","text":"<pre><code>poe --help\n</code></pre> <p>You'll see tasks for: - Testing: <code>poe test</code>, <code>poe coverage</code> - Code Quality: <code>poe ty</code>, <code>poe ruff</code>, <code>poe check</code>, <code>poe qc</code> - Publishing: <code>poe publish_patch</code>, <code>poe publish_minor</code>, <code>poe publish_major</code> - Documentation: <code>poe docs-serve</code>, <code>poe docs-build</code>, <code>poe docs-deploy</code> - Utilities: <code>poe clean</code>, <code>poe tree</code></p>"},{"location":"quickstart/#run-your-cli","title":"Run Your CLI","text":"<pre><code># Via python module\npython -m your_package_name --help\n\n# Or if installed in development mode\nyour_package_name --help\n</code></pre>"},{"location":"quickstart/#run-quality-checks","title":"Run Quality Checks","text":"<pre><code>poe qc\n</code></pre> <p>This runs: - Type checking with <code>ty</code> - Linting and formatting with <code>ruff</code> - Tests with <code>pytest</code> - Coverage reporting</p>"},{"location":"quickstart/#step-4-start-developing","title":"Step 4: Start Developing","text":""},{"location":"quickstart/#edit-your-code","title":"Edit Your Code","text":"<p>Your main code lives in: - <code>src/your_package_name/__main__.py</code> - CLI entry point - <code>src/your_package_name/__init__.py</code> - Package initialization - <code>src/your_package_name/self_subcommand.py</code> - Built-in commands - <code>src/your_package_name/settings.py</code> - Configuration (if enabled)</p>"},{"location":"quickstart/#add-tests","title":"Add Tests","text":"<p>Write tests in the <code>tests/</code> directory: - <code>tests/test_cli.py</code> - CLI testing examples provided</p>"},{"location":"quickstart/#update-documentation","title":"Update Documentation","text":"<ul> <li>Edit <code>README.md</code> for your project description</li> <li>Add documentation in <code>docs/</code> directory</li> <li>Documentation auto-deploys to GitHub Pages</li> </ul>"},{"location":"quickstart/#step-5-publish-your-package","title":"Step 5: Publish Your Package","text":""},{"location":"quickstart/#test-publishing-optional","title":"Test Publishing (Optional)","text":"<pre><code># Build your package\nuv build\n\n# Check the built package\nls dist/\n</code></pre>"},{"location":"quickstart/#publish-to-pypi","title":"Publish to PyPI","text":"<pre><code># For bug fixes\npoe publish_patch\n\n# For new features  \npoe publish_minor\n\n# For breaking changes\npoe publish_major\n</code></pre> <p>This will: 1. \u2705 Run all quality checks 2. \u2705 Version your package 3. \u2705 Create a git tag 4. \u2705 Trigger GitHub Actions 5. \u2705 Build and publish to PyPI 6. \u2705 Create GitHub release 7. \u2705 Deploy documentation</p>"},{"location":"quickstart/#common-development-workflow","title":"Common Development Workflow","text":"<pre><code># Make changes to your code\nvim src/your_package_name/__main__.py\n\n# Run quality checks\npoe qc\n\n# Run tests\npoe test\n\n# Commit your changes\ngit add .\ngit commit -m \"Add new feature\"\n\n# When ready to release\npoe publish_patch\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Template User Guide - Detailed feature documentation</li> <li>Customization Guide - Modify your project</li> <li>GitHub Workflows - See template-guide.md for CI/CD pipeline details</li> </ul>"},{"location":"quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"quickstart/#common-issues","title":"Common Issues","text":"<p>Virtual environment not activated? <pre><code>source .venv/bin/activate  # Manual activation\n# OR install direnv for automatic activation\n</code></pre></p> <p>Tests failing? <pre><code>poe test -v  # Verbose test output\n</code></pre></p> <p>Build failing? <pre><code>uv build --verbose  # Detailed build output\n</code></pre></p> <p>GitHub Actions failing? - Check the Actions tab in your GitHub repository - Ensure PyPI trusted publishing is configured (see template-guide.md)</p>"},{"location":"quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs or ask questions</li> <li>Documentation: Check the complete template guide</li> <li>Community: Join discussions on GitHub</li> </ul>"},{"location":"template-guide/","title":"Template User Guide","text":"<p>This guide provides detailed information about all features available in the Python Package Cookiecutter Template and how to use them effectively.</p>"},{"location":"template-guide/#template-features","title":"Template Features","text":""},{"location":"template-guide/#project-structure","title":"Project Structure","text":"<p>The template creates a well-organized project following Python packaging best practices:</p> <pre><code>your-package/\n\u251c\u2500\u2500 .cookiecutter.json      # Template configuration used\n\u251c\u2500\u2500 .envrc                  # direnv configuration (optional)\n\u251c\u2500\u2500 .github/                # GitHub workflows and templates\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u251c\u2500\u2500 release.yaml    # CI/CD pipeline\n\u2502   \u2502   \u2514\u2500\u2500 docs.yml        # Documentation deployment\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/     # GitHub issue templates\n\u2502   \u2502   \u251c\u2500\u2500 1_bug_report.yaml\n\u2502   \u2502   \u251c\u2500\u2500 2_feature_request.yaml\n\u2502   \u2502   \u251c\u2500\u2500 3_question.yaml\n\u2502   \u2502   \u2514\u2500\u2500 config.yaml\n\u2502   \u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u2502   \u2514\u2500\u2500 dependabot.yaml     # Dependency updates\n\u251c\u2500\u2500 .gitignore              # Comprehensive gitignore\n\u251c\u2500\u2500 CONTRIBUTING.md         # Contribution guidelines\n\u251c\u2500\u2500 docs/                   # MkDocs documentation\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 changelog.md\n\u2502   \u251c\u2500\u2500 contributing.md\n\u2502   \u2514\u2500\u2500 gen_ref_pages.py    # Auto-generates API docs\n\u251c\u2500\u2500 LICENSE                 # Your chosen license\n\u251c\u2500\u2500 mkdocs.yml              # Documentation configuration\n\u251c\u2500\u2500 pyproject.toml          # Project and tool configuration\n\u251c\u2500\u2500 README.md               # Project documentation\n\u251c\u2500\u2500 src/                    # Source code (src layout)\n\u2502   \u2514\u2500\u2500 your_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py     # CLI entry point\n\u2502       \u251c\u2500\u2500 self_subcommand.py  # Built-in commands\n\u2502       \u2514\u2500\u2500 settings.py     # Configuration (optional)\n\u251c\u2500\u2500 tests/                  # Test suite\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u2514\u2500\u2500 test_cli.py\n\u2514\u2500\u2500 uv.lock                 # Dependency lock file\n</code></pre>"},{"location":"template-guide/#core-components","title":"Core Components","text":""},{"location":"template-guide/#command-line-interface-cli","title":"Command Line Interface (CLI)","text":"<p>Every package includes a fully functional CLI built with Typer:</p> <ul> <li>Main CLI: Accessible via <code>python -m your_package</code> or <code>your_package</code></li> <li>Built-in Commands: Version, help, and self-diagnostics</li> <li>Extensible: Easy to add new commands and subcommands</li> <li>Rich Output: Formatted help text and error messages</li> </ul>"},{"location":"template-guide/#configuration-management","title":"Configuration Management","text":"<p>Optional Pydantic Settings integration:</p> <pre><code># src/your_package/settings.py\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    debug: bool = False\n    log_level: str = \"INFO\"\n\n    class Config:\n        env_prefix = \"YOUR_PACKAGE_\"\n</code></pre> <p>Usage: <pre><code>export YOUR_PACKAGE_DEBUG=true\nexport YOUR_PACKAGE_LOG_LEVEL=DEBUG\nyour_package command\n</code></pre></p>"},{"location":"template-guide/#logging","title":"Logging","text":"<p>Loguru-based logging with optional file output:</p> <pre><code>from loguru import logger\n\nlogger.info(\"Application started\")\nlogger.debug(\"Debug information\")\nlogger.error(\"Something went wrong\")\n</code></pre> <p>With file logging enabled: - Console output for development - Rotating log files for production - Structured logging with timestamps</p>"},{"location":"template-guide/#development-tools","title":"Development Tools","text":""},{"location":"template-guide/#poe-the-poet-tasks","title":"Poe The Poet Tasks","text":"<p>Pre-configured tasks in <code>pyproject.toml</code>:</p> <pre><code># Code Quality\npoe ty              # Type checking with ty\npoe ruff-check      # Linting with ruff\npoe ruff-format     # Code formatting with ruff\npoe ruff            # Both linting and formatting\npoe check           # Quick quality checks\npoe qc              # Comprehensive quality control\n\n# Testing\npoe test            # Run pytest\npoe coverage        # Generate coverage report\n\n# Publishing\npoe publish_patch   # Patch version release (1.0.0 -&gt; 1.0.1)\npoe publish_minor   # Minor version release (1.0.0 -&gt; 1.1.0)\npoe publish_major   # Major version release (1.0.0 -&gt; 2.0.0)\npoe publish         # Alias for publish_minor\n\n# Documentation\npoe docs-serve      # Serve docs locally\npoe docs-build      # Build documentation\npoe docs-deploy     # Deploy to GitHub Pages\n\n# Utilities\npoe clean           # Remove build artifacts\npoe tree            # Show project structure\n</code></pre>"},{"location":"template-guide/#quality-assurance","title":"Quality Assurance","text":"<p>Comprehensive code quality tools:</p> <ul> <li>Ruff: Fast linting and formatting</li> <li>ty: Type checking for Python</li> <li>pytest: Testing framework with fixtures</li> <li>Coverage: Code coverage reporting</li> </ul>"},{"location":"template-guide/#github-integration","title":"GitHub Integration","text":""},{"location":"template-guide/#workflows","title":"Workflows","text":"<p>Two main GitHub Actions workflows:</p> <p>Release Workflow (<code>release.yaml</code>): 1. Dynamic Python Version Detection: Reads test versions from <code>pyproject.toml</code> 2. Matrix Testing: Tests across Python versions and operating systems 3. Build Package: Creates wheel and source distributions 4. Publish to PyPI: Uses trusted publishing (no API tokens) 5. GitHub Release: Auto-generates release notes and changelog 6. Deploy Documentation: Triggers documentation deployment</p> <p>Documentation Workflow (<code>docs.yml</code>): 1. Auto-enable GitHub Pages: Sets up Pages if not already configured 2. Build Documentation: Compiles MkDocs site 3. Deploy: Publishes to GitHub Pages</p>"},{"location":"template-guide/#issue-templates","title":"Issue Templates","text":"<p>Structured GitHub issue templates:</p> <ul> <li>Bug Report: Structured bug reporting with environment details</li> <li>Feature Request: Template for suggesting new features</li> <li>Question: General questions and discussion</li> <li>Configuration: Links to discussions and documentation</li> </ul>"},{"location":"template-guide/#dependabot","title":"Dependabot","text":"<p>Automatic dependency updates: - Python dependencies: Daily checks - GitHub Actions: Weekly checks - Grouped updates: Related dependencies updated together</p>"},{"location":"template-guide/#documentation-system","title":"Documentation System","text":""},{"location":"template-guide/#mkdocs-integration","title":"MkDocs Integration","text":"<p>Complete documentation setup with theme options:</p> <p>Available Themes: - Material: Feature-rich with dark/light mode - Read the Docs: Classic documentation style - MkDocs: Default lightweight theme - Bootstrap: Responsive design - Windmill: Clean minimal theme</p> <p>Features: - Auto-generated API documentation from docstrings - Search functionality with highlighting - Automatic deployment to GitHub Pages - Navigation structure with user guide and examples</p>"},{"location":"template-guide/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                # Homepage\n\u251c\u2500\u2500 getting-started/\n\u2502   \u251c\u2500\u2500 installation.md     # Installation instructions\n\u2502   \u251c\u2500\u2500 quickstart.md       # Quick start guide\n\u2502   \u2514\u2500\u2500 configuration.md    # Configuration options\n\u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 cli.md             # CLI usage\n\u2502   \u2514\u2500\u2500 examples.md        # Usage examples\n\u251c\u2500\u2500 contributing.md        # Contribution guidelines\n\u2514\u2500\u2500 changelog.md           # Project changelog\n</code></pre>"},{"location":"template-guide/#configuration-options","title":"Configuration Options","text":""},{"location":"template-guide/#cookiecutter-variables","title":"Cookiecutter Variables","text":""},{"location":"template-guide/#basic-project-information","title":"Basic Project Information","text":"<pre><code>{\n    \"package_name\": \"my_package\",\n    \"package_description\": \"A short description of the package\",\n    \"author_name\": \"Your Name\", \n    \"author_email\": \"your.email@example.com\",\n    \"github_username\": \"yourusername\",\n    \"project_version\": \"0.1.0\"\n}\n</code></pre>"},{"location":"template-guide/#license-options","title":"License Options","text":"<pre><code>{\n    \"license\": [\n        \"MIT\",\n        \"Apache-2.0\", \n        \"GPL-3.0\",\n        \"BSD-2-Clause\",\n        \"BSD-3-Clause\",\n        \"BSL-1.0\",\n        \"CC0-1.0\",\n        \"EPL-2.0\",\n        \"GPL-2.0\",\n        \"LGPL-2.1\",\n        \"MPL-2.0\",\n        \"AGPL-3.0\",\n        \"no-license\"\n    ]\n}\n</code></pre>"},{"location":"template-guide/#feature-toggles","title":"Feature Toggles","text":"<pre><code>{\n    \"use_pydantic_settings\": true,\n    \"log_to_file\": false,\n    \"create_github_repo\": false,\n    \"make_github_repo_private\": false,\n    \"readme_badges\": true\n}\n</code></pre>"},{"location":"template-guide/#build-and-ci-configuration","title":"Build and CI Configuration","text":"<pre><code>{\n    \"build_backend\": [\"uv\", \"hatch\"],\n    \"python_version_dev\": \"3.13\",\n    \"python_testing_matrix\": [\"3.11\", \"3.12\", \"3.13\"],\n    \"os_testing_matrix\": \"ubuntu-latest, macos-latest, windows-latest\"\n}\n</code></pre>"},{"location":"template-guide/#documentation-options","title":"Documentation Options","text":"<pre><code>{\n    \"mkdocs_theme\": [\n        \"material\",\n        \"readthedocs\", \n        \"mkdocs\",\n        \"bootstrap\",\n        \"windmill\"\n    ]\n}\n</code></pre>"},{"location":"template-guide/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"template-guide/#cicd-customization","title":"CI/CD Customization","text":"<p>Modify Python versions and OS matrix in your project's <code>pyproject.toml</code>:</p> <pre><code>[tool.your_package.ci]\ntest-python-versions = [\"3.11\", \"3.12\", \"3.13\"]\n</code></pre> <p>The workflow automatically detects and uses these versions.</p>"},{"location":"template-guide/#build-backend-selection","title":"Build Backend Selection","text":"<p>Choose between build backends:</p> <ul> <li>uv (default): Fast dependency resolution</li> <li>hatch: Traditional, well-established build system</li> </ul>"},{"location":"template-guide/#github-actions-workflow-details","title":"GitHub Actions Workflow Details","text":""},{"location":"template-guide/#workflow-triggers","title":"Workflow Triggers","text":"<p>The release workflow triggers on: - Semantic version tags: <code>v1.0.0</code>, <code>v2.1.3</code>, etc. - Pull requests: Runs tests only - Manual dispatch: For testing</p>"},{"location":"template-guide/#workflow-jobs","title":"Workflow Jobs","text":""},{"location":"template-guide/#1-get-python-versions","title":"1. Get Python Versions","text":"<ul> <li>Extracts Python test versions from <code>pyproject.toml</code></li> <li>Falls back to default versions if not specified</li> <li>Outputs versions for matrix testing</li> </ul>"},{"location":"template-guide/#2-test-matrix","title":"2. Test Matrix","text":"<ul> <li>Tests across Python versions and operating systems</li> <li>Runs comprehensive test suite</li> <li>Checks code quality with ruff and ty</li> </ul>"},{"location":"template-guide/#3-build-package","title":"3. Build Package","text":"<ul> <li>Creates wheel and source distributions</li> <li>Uploads artifacts for other jobs</li> <li>Only runs on successful tests and version tags</li> </ul>"},{"location":"template-guide/#4-publish-to-pypi","title":"4. Publish to PyPI","text":"<ul> <li>Uses PyPI trusted publishing (no API tokens needed)</li> <li>Downloads build artifacts</li> <li>Publishes to PyPI automatically</li> </ul>"},{"location":"template-guide/#5-github-release","title":"5. GitHub Release","text":"<ul> <li>Auto-generates changelog from git history</li> <li>Creates GitHub release with notes</li> <li>Attaches build artifacts</li> <li>Only runs on successful publishing</li> </ul>"},{"location":"template-guide/#6-deploy-documentation","title":"6. Deploy Documentation","text":"<ul> <li>Triggers documentation workflow via repository dispatch</li> <li>Ensures documentation updates after releases</li> </ul>"},{"location":"template-guide/#trusted-publishing-setup","title":"Trusted Publishing Setup","text":"<p>For PyPI publishing to work, configure trusted publishing:</p> <ol> <li>Go to PyPI: https://pypi.org/manage/account/publishing/</li> <li>Add a new trusted publisher:</li> <li>Repository name: <code>your-username/your-package</code></li> <li>Workflow name: <code>release.yaml</code></li> <li>Environment name: <code>pypi</code> (optional but recommended)</li> </ol>"},{"location":"template-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Customization Guide - How to modify your generated project</li> </ul>"}]}